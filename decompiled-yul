// Decompiled by library.dedaub.com
// 2025.08.21 13:29 UTC

object "contract" {
    code { }
    object "runtime" {
        code {
                mstore(0x40, 0x80)
                let _0 := lt(calldatasize(), 0x4)                
                if _0{
                    let _1 := calldatasize()                    
                    if not(_1){
                        func_receive()
                    }
                }
                if not(_0){
                    let _2 := shr(0xe0, calldataload(0x0))                    
                    let _3 := gt(0x64cc7327, _2)                    
                    if _3{
                        let _4 := eq(0x2fc82012, _2)                        
                        switch _2
                            case 0x2fc82012{
                                func_getAccess()
                            }
                            case 0x3a279611{
                                func_0x3a279611()
                            }
                            case 0x41225071{
                                func_getHint()
                            }
                            case 0x498a2031{
                                func_0x498a2031()
                            }
                            case 0x61a76900{
                                func_decode()
                            }
                            default { }
                    }
                    if not(_3){
                        let _5 := eq(0x64cc7327, _2)                        
                        switch _2
                            case 0x64cc7327{
                                func_retrieve()
                            }
                            case 0x6603891c{
                                func_scramble()
                            }
                            case 0x7408a1d7{
                                func_store()
                            }
                            case 0xb70b232d{
                                func_0xb70b232d()
                            }
                            case 0xcffd46dc{
                                func_0xcffd46dc()
                            }
                            default { }
                    }
                }
                let _6 := sub(calldatasize(), 0x4)                
                if not(_6){
                    let _7 := calldatasize()                    
                    let _8 := and(calldataload(0x0), 0xffffffff00000000000000000000000000000000000000000000000000000000)                    
                    let _9 := _8                    
                    let _10 := iszero(lt(_7, 0x4))                    
                    if not(_10){
                        _9 := and(_8, shl(mul(0x8, sub(0x4, _7)), 0xffffffff00000000000000000000000000000000000000000000000000000000))                        
                    }
                    let _11 := sub(and(not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff), _9), and(not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff), 0xb5d09fae7b7af1adf48400132f74ac6d1d5d2e965dfd4f7405cdb9262d87938f))                    
                    if not(_11){
                        let _12 := mload(0x40)                        
                        mstore(0x40, add(0x40, _12))
                        mstore(_12, 0x6)
                        mstore(add(0x20, _12), 0x7374617475730000000000000000000000000000000000000000000000000000)
                        mstore(0x0, func_0x525(_12, 0x1be))
                        let _13 := add(0x20, 0x0)                        
                        mstore(_13, 0x0)
                        let _14 := sload(keccak256(0x0, add(0x20, _13)))                        
                        let _15 := sub(_14, 0x0)                        
                        if _15{
                            let _16 := selfbalance()                            
                            let _17 := mload(0x40)                            
                            mstore(0x40, add(0x40, _17))
                            mstore(_17, 0x6)
                            mstore(add(0x20, _17), 0x7374617475730000000000000000000000000000000000000000000000000000)
                            mstore(0x0, func_0x525(_17, 0x248))
                            let _18 := add(0x20, 0x0)                            
                            mstore(_18, 0x0)
                            sstore(keccak256(0x0, add(0x20, _18)), 0x0)
                            let _19 := mload(0x40)                            
                            mstore(add(_19, 0x0), _16)
                            let _20 := mload(0x40)                            
                            log2(_20, sub(add(_19, 0x20), _20), 0xf25030dea1ced040053b39f74d7a42dd30b2ff8a6c4206fa98f9fceb666cab08, and(0xffffffffffffffffffffffffffffffffffffffff, caller()))
                            let _21 := mload(0x40)                            
                            let _22 := mload(0x40)                            
                            let _23 := call(gas(), and(0xffffffffffffffffffffffffffffffffffffffff, caller()), _16, _22, sub(add(_21, 0x0), _22), _22, 0x0)                            
                            let _24 := returndatasize()                            
                            let _25 := eq(_24, 0x0)                            
                            switch _24
                                case 0x0{ }
                                default {
                                    let _26 := mload(0x40)                                    
                                    mstore(0x40, add(_26, and(add(returndatasize(), 0x3f), not(0x1f))))
                                    mstore(_26, returndatasize())
                                    returndatacopy(add(_26, 0x20), 0x0, returndatasize())
                                }
                            if not(_23){
                                let _27 := mload(0x40)                                
                                mstore(_27, 0x90b8ec1800000000000000000000000000000000000000000000000000000000)
                                let _28 := mload(0x40)                                
                                revert(_28, sub(add(0x4, _27), _28))
                            }
                        }
                        if not(_15){
                            let _29 := mload(0x40)                            
                            mstore(_29, 0xf2e5b6c00000000000000000000000000000000000000000000000000000000)
                            let _30 := mload(0x40)                            
                            revert(_30, sub(add(0x4, _29), _30))
                        }
                    }
                }
                stop()
            function func_0x111d(_31, _32, _33)  -> ret_val_0 {
                    let _34 := add(_31, _32)                    
                    let _35 := iszero(gt(_31, _34))                    
                    if _35{
                        ret_val_0 := _34                        
                        leave
                    }
                    if not(_35){
                        mstore(0x0, 0x4e487b7100000000000000000000000000000000000000000000000000000000)
                        mstore(0x4, 0x11)
                        revert(0x0, 0x24)
                    }
                }
            function func_0x18e1(_36, _37, _38)  -> ret_val_0 {
                    let _39 := mul(_36, _37)                    
                    let _40 := or(iszero(_36), eq(_37, div(_39, _36)))                    
                    if _40{
                        ret_val_0 := _39                        
                        leave
                    }
                    if not(_40){
                        mstore(0x0, 0x4e487b7100000000000000000000000000000000000000000000000000000000)
                        mstore(0x4, 0x11)
                        revert(0x0, 0x24)
                    }
                }
            function func_0x1999(_41, _42, _43)  -> ret_val_0 {
                    let _44 := sub(_41, _42)                    
                    let _45 := iszero(gt(_44, _41))                    
                    if _45{
                        ret_val_0 := _44                        
                        leave
                    }
                    if not(_45){
                        mstore(0x0, 0x4e487b7100000000000000000000000000000000000000000000000000000000)
                        mstore(0x4, 0x11)
                        revert(0x0, 0x24)
                    }
                }
            function func_getAccess() {
                    let _46 := iszero(callvalue())                    
                    require(not(_46))
                    let _47 := iszero(slt(sub(add(0x4, sub(calldatasize(), 0x4)), 0x4), 0x20))                    
                    require(not(_47))
                    let _48 := calldataload(add(0x4, 0x0))                    
                    let _49 := eq(_48, _48)                    
                    require(not(_49))
                    let _50 := mload(0x40)                    
                    mstore(0x40, add(0x40, _50))
                    mstore(_50, 0x6)
                    mstore(add(0x20, _50), 0x7374617475730000000000000000000000000000000000000000000000000000)
                    mstore(0x0, func_0x525(_50, 0x5b7))
                    let _51 := add(0x20, 0x0)                    
                    mstore(_51, 0x0)
                    let _52 := sload(keccak256(0x0, add(0x20, _51)))                    
                    let _53 := sub(_52, 0x0)                    
                    if _53{
                        if 0x3e8{
                            let _54 := mload(0x40)                            
                            let _55 := add(0x20, _54)                            
                            mstore(_55, div(timestamp(), 0x3e8))
                            let _56 := add(_55, 0x20)                            
                            mstore(_56, shl(0x60, and(caller(), 0xffffffffffffffffffffffffffffffffffffffff)))
                            let _57 := add(_56, 0x14)                            
                            mstore(add(_57, 0x0), 0x6163636573730000000000000000000000000000000000000000000000000000)
                            let _58 := add(_57, 0x6)                            
                            let _59 := mload(0x40)                            
                            mstore(_59, sub(sub(_58, _59), 0x20))
                            mstore(0x40, _58)
                            let _60 := mload(_59)                            
                            if 0xf4240{
                                let _61 := eq(_48, mod(shr(0x0, keccak256(add(0x20, _59), _60)), 0xf4240))                                
                                let _62 := _61                                
                                if not(_61){
                                    _62 := eq(and(xor(_48, 0x42), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), xor(_48, 0x42))                                    
                                }
                                let _63 := iszero(_62)                                
                                if not(_63){
                                    let _64 := mload(0x40)                                    
                                    mstore(0x40, add(0x40, _64))
                                    mstore(_64, 0x5)
                                    mstore(add(0x20, _64), 0x61646d696e000000000000000000000000000000000000000000000000000000)
                                    mstore(0x0, and(0xffffffffffffffffffffffffffffffffffffffff, and(0xffffffffffffffffffffffffffffffffffffffff, caller())))
                                    let _65 := add(0x20, 0x0)                                    
                                    mstore(_65, 0x1)
                                    sstore(keccak256(0x0, add(0x20, _65)), func_0x525(_64, 0x6a0))
                                    let _66 := mload(0x40)                                    
                                    let _67 := mload(0x40)                                    
                                    log2(_67, sub(_66, _67), 0xdeb5c31899474fe8c086c95ff9344480d19365676a6a1d22d37bb8e3e7c0ef18, and(0xffffffffffffffffffffffffffffffffffffffff, caller()))
                                }
                                stop()
                            }
                            if not(0xf4240){
                                mstore(0x0, 0x4e487b7100000000000000000000000000000000000000000000000000000000)
                                mstore(0x4, 0x12)
                                revert(0x0, 0x24)
                            }
                        }
                        if not(0x3e8){
                            mstore(0x0, 0x4e487b7100000000000000000000000000000000000000000000000000000000)
                            mstore(0x4, 0x12)
                            revert(0x0, 0x24)
                        }
                    }
                    if not(_53){
                        let _68 := mload(0x40)                        
                        mstore(_68, 0xf2e5b6c00000000000000000000000000000000000000000000000000000000)
                        let _69 := mload(0x40)                        
                        revert(_69, sub(add(0x4, _68), _69))
                    }
                }
            function func_0x3a279611() {
                    let _70 := 0x0                    
                    let _71 := iszero(callvalue())                    
                    require(not(_71))
                    let _72 := add(0x4, sub(calldatasize(), 0x4))                    
                    let _73 := iszero(slt(sub(_72, 0x4), 0x20))                    
                    require(not(_73))
                    let _74 := calldataload(add(0x4, 0x0))                    
                    let _75 := iszero(gt(_74, 0xffffffffffffffff))                    
                    require(not(_75))
                    let _76 := add(0x4, _74)                    
                    let _77 := slt(add(_76, 0x1f), _72)                    
                    require(not(_77))
                    let _78 := calldataload(_76)                    
                    let _79 := iszero(gt(_78, 0xffffffffffffffff))                    
                    require(not(_79))
                    let _80 := add(_76, 0x20)                    
                    let _81 := iszero(gt(add(_80, mul(_78, 0x20)), _72))                    
                    require(not(_81))
                    let _82 := eq(_78, 0x4)                    
                    switch _78
                        case 0x4{
                            let _83 := lt(0x2, _78)                            
                            if _83{
                                let _84 := lt(0x1, _78)                                
                                if _84{
                                    let _85 := lt(0x0, _78)                                    
                                    if _85{
                                        let _86 := eq(func_0x111d(calldataload(add(mul(0x20, 0x0), _80)), calldataload(add(mul(0x20, 0x1), _80)), 0x797), calldataload(add(mul(0x20, 0x2), _80)))                                        
                                        let _87 := _86                                        
                                        let _88 := iszero(_86)                                        
                                        if not(_88){
                                            let _89 := lt(0x3, _78)                                            
                                            if _89{
                                                let _90 := lt(0x2, _78)                                                
                                                if _90{
                                                    _87 := eq(func_0x18e1(calldataload(add(mul(0x20, 0x2), _80)), 0x2, 0x7e1), calldataload(add(mul(0x20, 0x3), _80)))                                                    
                                                }
                                                if not(_90){
                                                    mstore(0x0, 0x4e487b7100000000000000000000000000000000000000000000000000000000)
                                                    mstore(0x4, 0x32)
                                                    revert(0x0, 0x24)
                                                }
                                            }
                                            if not(_89){
                                                mstore(0x0, 0x4e487b7100000000000000000000000000000000000000000000000000000000)
                                                mstore(0x4, 0x32)
                                                revert(0x0, 0x24)
                                            }
                                        }
                                    }
                                    if not(_85){
                                        mstore(0x0, 0x4e487b7100000000000000000000000000000000000000000000000000000000)
                                        mstore(0x4, 0x32)
                                        revert(0x0, 0x24)
                                    }
                                }
                                if not(_84){
                                    mstore(0x0, 0x4e487b7100000000000000000000000000000000000000000000000000000000)
                                    mstore(0x4, 0x32)
                                    revert(0x0, 0x24)
                                }
                            }
                            if not(_83){
                                mstore(0x0, 0x4e487b7100000000000000000000000000000000000000000000000000000000)
                                mstore(0x4, 0x32)
                                revert(0x0, 0x24)
                            }
                        }
                        default {
                            _70 := 0x0                            
                        }
                    let _91 := mload(0x40)                    
                    mstore(add(_91, 0x0), iszero(iszero(_70)))
                    let _92 := mload(0x40)                    
                    return(_92, sub(add(_91, 0x20), _92))
                }
            function func_getHint() {
                    let _93 := iszero(callvalue())                    
                    require(not(_93))
                    let _94 := mload(0x40)                    
                    mstore(add(_94, 0x0), 0x7468655f647261696e5f66756e6374696f6e5f69735f68696464656e000000)
                    let _95 := mload(0x40)                    
                    return(_95, sub(add(_94, 0x20), _95))
                }
            function func_0x498a2031() {
                    let _96 := 0x0                    
                    let _97 := iszero(callvalue())                    
                    require(not(_97))
                    let _98 := add(0x4, sub(calldatasize(), 0x4))                    
                    let _99 := iszero(slt(sub(_98, 0x4), 0x20))                    
                    require(not(_99))
                    let _100 := calldataload(add(0x4, 0x0))                    
                    let _101 := iszero(gt(_100, 0xffffffffffffffff))                    
                    require(not(_101))
                    let _102 := add(0x4, _100)                    
                    let _103 := slt(add(_102, 0x1f), _98)                    
                    require(not(_103))
                    let _104 := calldataload(_102)                    
                    let _105 := iszero(gt(_104, 0xffffffffffffffff))                    
                    require(not(_105))
                    let _106 := add(_102, 0x20)                    
                    let _107 := iszero(gt(add(_106, mul(_104, 0x1)), _98))                    
                    require(not(_107))
                    mstore(0x0, and(0xffffffffffffffffffffffffffffffffffffffff, and(0xffffffffffffffffffffffffffffffffffffffff, caller())))
                    let _108 := add(0x20, 0x0)                    
                    mstore(_108, 0x1)
                    let _109 := sload(keccak256(0x0, add(0x20, _108)))                    
                    let _110 := sub(_109, shl(0x0, 0x0))                    
                    if _110{
                        let _111 := mload(0x40)                        
                        mstore(0x40, add(0x40, _111))
                        mstore(_111, 0x5)
                        mstore(add(0x20, _111), 0x61646d696e000000000000000000000000000000000000000000000000000000)
                        let _112 := eq(_109, func_0x525(_111, 0x8ce))                        
                        let _113 := _112                        
                        if not(_112){
                            let _114 := mload(0x40)                            
                            mstore(0x40, add(0x40, _114))
                            mstore(_114, 0x5)
                            mstore(add(0x20, _114), 0x6f776e6572000000000000000000000000000000000000000000000000000000)
                            _113 := eq(_109, func_0x525(_114, 0x914))                            
                        }
                        let _115 := iszero(_113)                        
                        if _115{
                            let _116 := mload(0x40)                            
                            mstore(_116, 0x9bf6d7c500000000000000000000000000000000000000000000000000000000)
                            let _117 := mload(0x40)                            
                            revert(_117, sub(add(0x4, _116), _117))
                        }
                        if not(_115){
                            let _118 := mload(0x40)                            
                            calldatacopy(_118, _106, _104)
                            mstore(add(_118, _104), 0x0)
                            let _119 := mload(0x40)                            
                            let _120 := call(gas(), and(0xffffffffffffffffffffffffffffffffffffffff, address()), 0x0, _119, sub(add(_118, _104), _119), _119, 0x0)                            
                            let _121 := returndatasize()                            
                            let _122 := eq(_121, 0x0)                            
                            switch _121
                                case 0x0{
                                    _96 := 0x60                                    
                                }
                                default {
                                    let _123 := mload(0x40)                                    
                                    _96 := _123                                    
                                    mstore(0x40, add(_123, and(add(returndatasize(), 0x3f), not(0x1f))))
                                    mstore(_123, returndatasize())
                                    returndatacopy(add(_123, 0x20), 0x0, returndatasize())
                                }
                            if _120{
                                let _124 := mload(0x40)                                
                                let _125 := add(_124, 0x20)                                
                                mstore(add(_124, 0x0), sub(_125, _124))
                                let _126 := mload(_96)                                
                                mstore(_125, _126)
                                let _127 := add(_125, 0x20)                                
                                let _128 := add(_96, 0x20)                                
                                mcopy()
                                mstore(add(_127, _126), 0x0)
                                let _129 := mload(0x40)                                
                                return(_129, sub(add(_127, and(add(_126, 0x1f), not(0x1f))), _129))
                            }
                            if not(_120){
                                let _130 := mload(0x40)                                
                                mstore(_130, 0xacfdb44400000000000000000000000000000000000000000000000000000000)
                                let _131 := mload(0x40)                                
                                revert(_131, sub(add(0x4, _130), _131))
                            }
                        }
                    }
                    if not(_110){
                        let _132 := mload(0x40)                        
                        mstore(_132, 0x2c1a75e200000000000000000000000000000000000000000000000000000000)
                        let _133 := mload(0x40)                        
                        revert(_133, sub(add(0x4, _132), _133))
                    }
                }
            function func_decode() {
                    let _134 := iszero(callvalue())                    
                    require(not(_134))
                    let _135 := iszero(slt(sub(add(0x4, sub(calldatasize(), 0x4)), 0x4), 0x20))                    
                    require(not(_135))
                    let _136 := calldataload(add(0x4, 0x0))                    
                    let _137 := eq(_136, _136)                    
                    require(not(_137))
                    let _138 := iszero(gt(0x20, 0xffffffffffffffff))                    
                    if _138{
                        let _139 := mload(0x40)                        
                        mstore(_139, 0x20)
                        mstore(0x40, add(_139, add(0x20, and(not(0x1f), add(0x1f, 0x20)))))
                        let _140 := iszero(0x20)                        
                        if not(_140){
                            let _141 := add(0x20, _139)                            
                            let _142 := mul(0x20, 0x1)                            
                            calldatacopy(_141, calldatasize(), _142)
                            let _143 := add(_141, _142)                            
                        }
                        let _144 := 0x0                        
                        let _145 := 0x0                        
                        let _146 := 0x0                        
                        let _147 := 0x0                        
                        let _148 := 0x0                        
                        let _149 := mload(0x40)                        
                        let _150 := add(_149, 0x20)                        
                        mstore(add(_149, 0x0), sub(_150, _149))
                        let _151 := mload(_139)                        
                        mstore(_150, _151)
                        let _152 := add(_150, 0x20)                        
                        let _153 := add(_139, 0x20)                        
                        mcopy()
                        mstore(add(_152, _151), 0x0)
                        let _154 := mload(0x40)                        
                        return(_154, sub(add(_152, and(add(_151, 0x1f), not(0x1f))), _154))
                        for {
                            let _156 := 0x20                            
                            let _155 := lt(_144, _156)                            
                            let _157 := 0x1                            
                            let _158 := add(_157, _148)                            
                        }
                        not(iszero(_155))                        
                        { }
                        {
                            _144 := _158                            
                            _156 := 0x20                            
                            _155 := lt(_144, _156)                            
                            let _159 := not(iszero(_155))                            
                            _145 := _158                            
                            _146 := _158                            
                            let _160 := mload(_139)                            
                            let _161 := lt(_146, _160)                            
                            if _161{
                                _147 := _158                                
                                _148 := _158                                
                                mstore8(add(add(0x20, _147), _139), byte(0x0, and(not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), shl(0xf8, shr(func_0x18e1(0x8, func_0x1999(0x1f, _145, 0xa70), 0xa7c), _136)))))
                                _157 := 0x1                                
                                _158 := add(_157, _148)                                
                                _144 := _158                                
                                _145 := _158                                
                                _146 := _158                                
                                _147 := _158                                
                                _148 := _158                                
                            }
                            if not(_161){
                                mstore(0x0, 0x4e487b7100000000000000000000000000000000000000000000000000000000)
                                mstore(0x4, 0x32)
                                revert(0x0, 0x24)
                                break
                            }
                        }
                    }
                    if not(_138){
                        mstore(0x0, 0x4e487b7100000000000000000000000000000000000000000000000000000000)
                        mstore(0x4, 0x41)
                        revert(0x0, 0x24)
                    }
                }
            function func_retrieve() {
                    let _162 := iszero(callvalue())                    
                    require(not(_162))
                    let _163 := add(0x4, sub(calldatasize(), 0x4))                    
                    let _164 := iszero(slt(sub(_163, 0x4), 0x20))                    
                    require(not(_164))
                    let _165 := calldataload(add(0x4, 0x0))                    
                    let _166 := iszero(gt(_165, 0xffffffffffffffff))                    
                    require(not(_166))
                    let _167 := add(0x4, _165)                    
                    let _168 := slt(add(_167, 0x1f), _163)                    
                    require(not(_168))
                    let _169 := calldataload(_167)                    
                    let _170 := iszero(gt(_169, 0xffffffffffffffff))                    
                    require(not(_170))
                    let _171 := add(_167, 0x20)                    
                    let _172 := iszero(gt(add(_171, mul(_169, 0x1)), _163))                    
                    require(not(_172))
                    let _173 := mload(0x40)                    
                    mstore(0x40, add(_173, add(0x20, mul(div(add(0x1f, _169), 0x20), 0x20))))
                    mstore(_173, _169)
                    let _174 := add(0x20, _173)                    
                    calldatacopy(_174, _171, _169)
                    mstore(add(_174, _169), 0x0)
                    let _175 := add(_174, and(add(_169, 0x1f), not(0x1f)))                    
                    mstore(0x0, func_0x525(_173, 0xb28))
                    let _176 := add(0x20, 0x0)                    
                    mstore(_176, 0x0)
                    let _177 := sload(keccak256(0x0, add(0x20, _176)))                    
                    let _178 := mload(0x40)                    
                    mstore(add(_178, 0x0), _177)
                    let _179 := mload(0x40)                    
                    return(_179, sub(add(_178, 0x20), _179))
                }
            function func_scramble() {
                    let _180 := iszero(callvalue())                    
                    require(not(_180))
                    let _181 := iszero(slt(sub(add(0x4, sub(calldatasize(), 0x4)), 0x4), 0x20))                    
                    require(not(_181))
                    let _182 := calldataload(add(0x4, 0x0))                    
                    let _183 := eq(_182, _182)                    
                    require(not(_183))
                    let _184 := mload(0x40)                    
                    let _185 := add(0x20, _184)                    
                    mstore(_185, _182)
                    let _186 := add(_185, 0x20)                    
                    mstore(_186, 0x651490e7365d8aab49e88aec6ae6efea33c016d3f8f2b6049c60c23c39d9e3ed)
                    let _187 := add(_186, 0x20)                    
                    mstore(_187, timestamp())
                    let _188 := add(_187, 0x20)                    
                    let _189 := mload(0x40)                    
                    mstore(_189, sub(sub(_188, _189), 0x20))
                    mstore(0x40, _188)
                    let _190 := mload(_189)                    
                    let _191 := mload(0x40)                    
                    mstore(add(_191, 0x0), xor(shr(0x0, keccak256(add(0x20, _189), _190)), _182))
                    let _192 := mload(0x40)                    
                    return(_192, sub(add(_191, 0x20), _192))
                }
            function func_0xb70b232d() {
                    let _193 := iszero(callvalue())                    
                    require(not(_193))
                    let _194 := mload(0x40)                    
                    mstore(0x40, add(0x40, _194))
                    mstore(_194, 0x5)
                    mstore(add(0x20, _194), 0x6f776e6572000000000000000000000000000000000000000000000000000000)
                    mstore(0x0, func_0x525(_194, 0xd6c))
                    let _195 := add(0x20, 0x0)                    
                    mstore(_195, 0x0)
                    let _196 := sload(keccak256(0x0, add(0x20, _195)))                    
                    let _197 := iszero(eq(and(0xffffffffffffffffffffffffffffffffffffffff, caller()), and(0xffffffffffffffffffffffffffffffffffffffff, _196)))                    
                    let _198 := _197                    
                    let _199 := iszero(_197)                    
                    if not(_199){
                        let _200 := mload(0x40)                        
                        mstore(0x40, add(0x40, _200))
                        mstore(_200, 0x5)
                        mstore(add(0x20, _200), 0x61646d696e000000000000000000000000000000000000000000000000000000)
                        mstore(0x0, and(0xffffffffffffffffffffffffffffffffffffffff, and(0xffffffffffffffffffffffffffffffffffffffff, caller())))
                        let _201 := add(0x20, 0x0)                        
                        mstore(_201, 0x1)
                        let _202 := sload(keccak256(0x0, add(0x20, _201)))                        
                        _198 := iszero(eq(_202, func_0x525(_200, 0xdee)))                        
                    }
                    let _203 := iszero(_198)                    
                    if _203{
                        let _204 := selfbalance()                        
                        let _205 := mload(0x40)                        
                        mstore(0x40, add(0x40, _205))
                        mstore(_205, 0x7)
                        mstore(add(0x20, _205), 0x62616c616e636500000000000000000000000000000000000000000000000000)
                        mstore(0x0, func_0x525(_205, 0xeab))
                        let _206 := add(0x20, 0x0)                        
                        mstore(_206, 0x0)
                        sstore(keccak256(0x0, add(0x20, _206)), 0x0)
                        let _207 := mload(0x40)                        
                        mstore(0x40, add(0x40, _207))
                        mstore(_207, 0x6)
                        mstore(add(0x20, _207), 0x7374617475730000000000000000000000000000000000000000000000000000)
                        mstore(0x0, func_0x525(_207, 0xefd))
                        let _208 := add(0x20, 0x0)                        
                        mstore(_208, 0x0)
                        sstore(keccak256(0x0, add(0x20, _208)), 0x0)
                        let _209 := mload(0x40)                        
                        mstore(add(_209, 0x0), _204)
                        let _210 := mload(0x40)                        
                        log2(_210, sub(add(_209, 0x20), _210), 0xf25030dea1ced040053b39f74d7a42dd30b2ff8a6c4206fa98f9fceb666cab08, and(0xffffffffffffffffffffffffffffffffffffffff, caller()))
                        let _211 := mload(0x40)                        
                        let _212 := mload(0x40)                        
                        let _213 := call(gas(), and(0xffffffffffffffffffffffffffffffffffffffff, caller()), _204, _212, sub(add(_211, 0x0), _212), _212, 0x0)                        
                        let _214 := returndatasize()                        
                        let _215 := eq(_214, 0x0)                        
                        switch _214
                            case 0x0{ }
                            default {
                                let _216 := mload(0x40)                                
                                mstore(0x40, add(_216, and(add(returndatasize(), 0x3f), not(0x1f))))
                                mstore(_216, returndatasize())
                                returndatacopy(add(_216, 0x20), 0x0, returndatasize())
                            }
                        if _213{
                            stop()
                        }
                        if not(_213){
                            let _217 := mload(0x40)                            
                            mstore(_217, 0x90b8ec1800000000000000000000000000000000000000000000000000000000)
                            let _218 := mload(0x40)                            
                            revert(_218, sub(add(0x4, _217), _218))
                        }
                    }
                    if not(_203){
                        let _219 := mload(0x40)                        
                        mstore(_219, 0x82b4290000000000000000000000000000000000000000000000000000000000)
                        let _220 := mload(0x40)                        
                        revert(_220, sub(add(0x4, _219), _220))
                    }
                }
            function func_0xcffd46dc() {
                    let _221 := iszero(callvalue())                    
                    require(not(_221))
                    let _222 := iszero(slt(sub(add(0x4, sub(calldatasize(), 0x4)), 0x4), 0x20))                    
                    require(not(_222))
                    let _223 := calldataload(add(0x4, 0x0))                    
                    let _224 := eq(_223, _223)                    
                    require(not(_224))
                    let _225 := mload(0x40)                    
                    let _226 := add(0x20, _225)                    
                    mstore(add(_226, 0x0), 0x647261696e000000000000000000000000000000000000000000000000000000)
                    let _227 := add(_226, 0x5)                    
                    mstore(_227, shl(0x60, and(caller(), 0xffffffffffffffffffffffffffffffffffffffff)))
                    let _228 := add(_227, 0x14)                    
                    mstore(_228, number())
                    let _229 := add(_228, 0x20)                    
                    let _230 := mload(0x40)                    
                    mstore(_230, sub(sub(_229, _230), 0x20))
                    mstore(0x40, _229)
                    let _231 := mload(_230)                    
                    let _232 := sub(_223, keccak256(add(0x20, _230), _231))                    
                    if not(_232){
                        let _233 := mload(0x40)                        
                        mstore(0x40, add(0x40, _233))
                        mstore(_233, 0x3)
                        mstore(add(0x20, _233), 0x676f640000000000000000000000000000000000000000000000000000000000)
                        mstore(0x0, and(0xffffffffffffffffffffffffffffffffffffffff, and(0xffffffffffffffffffffffffffffffffffffffff, caller())))
                        let _234 := add(0x20, 0x0)                        
                        mstore(_234, 0x1)
                        sstore(keccak256(0x0, add(0x20, _234)), func_0x525(_233, 0x1070))
                    }
                    stop()
                }
            function func_store() {
                    let _235 := add(0x4, sub(calldatasize(), 0x4))                    
                    let _236 := iszero(slt(sub(_235, 0x4), 0x40))                    
                    require(not(_236))
                    let _237 := calldataload(add(0x4, 0x0))                    
                    let _238 := iszero(gt(_237, 0xffffffffffffffff))                    
                    require(not(_238))
                    let _239 := add(0x4, _237)                    
                    let _240 := slt(add(_239, 0x1f), _235)                    
                    require(not(_240))
                    let _241 := calldataload(_239)                    
                    let _242 := iszero(gt(_241, 0xffffffffffffffff))                    
                    require(not(_242))
                    let _243 := add(_239, 0x20)                    
                    let _244 := iszero(gt(add(_243, mul(_241, 0x1)), _235))                    
                    require(not(_244))
                    let _245 := calldataload(add(0x4, 0x20))                    
                    let _246 := eq(_245, _245)                    
                    require(not(_246))
                    let _247 := sload(0x4)                    
                    let _248 := and(0xff, div(_247, exp(0x100, 0x0)))                    
                    if _248{
                        let _249 := mload(0x40)                        
                        mstore(0x40, add(_249, add(0x20, mul(div(add(0x1f, _241), 0x20), 0x20))))
                        mstore(_249, _241)
                        let _250 := add(0x20, _249)                        
                        calldatacopy(_250, _243, _241)
                        mstore(add(_250, _241), 0x0)
                        let _251 := add(_250, and(add(_241, 0x1f), not(0x1f)))                        
                        let _252 := func_0x525(_249, 0xc2d)                        
                        mstore(0x0, _252)
                        let _253 := add(0x20, 0x0)                        
                        mstore(_253, 0x0)
                        sstore(keccak256(0x0, add(0x20, _253)), _245)
                        mstore(0x0, and(0xffffffffffffffffffffffffffffffffffffffff, and(0xffffffffffffffffffffffffffffffffffffffff, caller())))
                        let _254 := add(0x20, 0x0)                        
                        mstore(_254, 0x1)
                        sstore(keccak256(0x0, add(0x20, _254)), _252)
                        let _255 := sload(0x3)                        
                        mstore(0x0, _255)
                        let _256 := add(0x20, 0x0)                        
                        mstore(_256, 0x2)
                        let _257 := keccak256(0x0, add(0x20, _256))                        
                        let _258 := exp(0x100, 0x0)                        
                        let _259 := sload(_257)                        
                        sstore(_257, or(mul(and(0xffffffffffffffffffffffffffffffffffffffff, caller()), _258), and(not(mul(0xffffffffffffffffffffffffffffffffffffffff, _258)), _259)))
                        let _260 := sload(0x3)                        
                        let _261 := sub(_260, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)                        
                        if _261{
                            sstore(0x3, add(_260, 0x1))
                            let _262 := mload(0x40)                            
                            mstore(add(_262, 0x0), _245)
                            let _263 := mload(0x40)                            
                            log2(_263, sub(add(_262, 0x20), _263), 0xb44a4099a1a4710e3d84492d3ab62eec832c496798a031e7a66d0d0e89cdbff, _252)
                            stop()
                        }
                        if not(_261){
                            mstore(0x0, 0x4e487b7100000000000000000000000000000000000000000000000000000000)
                            mstore(0x4, 0x11)
                            revert(0x0, 0x24)
                        }
                    }
                    if not(_248){
                        let _264 := mload(0x40)                        
                        mstore(_264, 0x9488aaa600000000000000000000000000000000000000000000000000000000)
                        let _265 := mload(0x40)                        
                        revert(_265, sub(add(0x4, _264), _265))
                    }
                }
            function func_receive() {
                    let _266 := mload(0x40)                    
                    mstore(0x40, add(0x40, _266))
                    mstore(_266, 0x7)
                    mstore(add(0x20, _266), 0x62616c616e636500000000000000000000000000000000000000000000000000)
                    mstore(0x0, func_0x525(_266, 0xda))
                    let _267 := add(0x20, 0x0)                    
                    mstore(_267, 0x0)
                    let _268 := keccak256(0x0, add(0x20, _267))                    
                    let _269 := sload(_268)                    
                    sstore(_268, func_0x111d(_269, callvalue(), 0xf5))
                    stop()
                }
            function func_0x525(_270, _271)  -> ret_val_0 {
                    let _272 := mload(0x40)                    
                    let _273 := add(0x20, _272)                    
                    let _274 := mload(_270)                    
                    let _275 := add(_270, 0x20)                    
                    mcopy()
                    mstore(add(_273, _274), 0x0)
                    let _276 := add(_273, _274)                    
                    mstore(_276, 0x651490e7365d8aab49e88aec6ae6efea33c016d3f8f2b6049c60c23c39d9e3ed)
                    let _277 := add(_276, 0x20)                    
                    let _278 := mload(0x40)                    
                    mstore(_278, sub(sub(_277, _278), 0x20))
                    mstore(0x40, _277)
                    let _279 := mload(_278)                    
                    ret_val_0 := keccak256(add(0x20, _278), _279)                    
                    leave
                }
            function require(condition) {
                    if iszero(condition){
                        revert(0x0, 0x0)
                    }
                }
        }
    }
}
